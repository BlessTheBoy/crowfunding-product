{"version":3,"sources":["script.js"],"names":["MicroModal","init","onShow","modal","console","log","concat","id","onClose","updateSelection","openClass","disableScroll","disableFocus","awaitOpenAnimation","awaitCloseAnimation","debugMode","openMenuBtn","document","getElementById","closeMenuBtn","menuControls","nav","bookmarkBtn","popupModal","querySelector","modalTriggers","querySelectorAll","modalCloseTrigger","successModalCloseTrigger","cardWrap","pledgeForms","modalHeader","radios","forms","inputs","donations","backers","progress","bookmarked","donationsValue","backersValue","products","no-reward","amount","minPledge","bamboo-stand","black-stand","mahogany-stand","openMenu","classList","add","closeMenu","remove","addBookmark","lastElementChild","innerText","selectCard","e","keycode","keyCode","which","caller","target","srcElement","contains","radio","checked","dataset","product","triggerClick","click","updateAmounts","numberWithCommas","value","forEach","element","card","button","disabled","wrap","tabIndex","openModal","show","focus","validatePledge","form","min","arguments","length","undefined","input","err","match","Number","x","parts","toString","split","replace","join","addEventListener","trigger","popupTrigger","header","nextElementSibling","preventDefault","pledge","close"],"mappings":"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","file":"script.js","sourcesContent":["// Initializing micromodal\r\nMicroModal.init({\r\n  onShow: (modal) => console.log(`${modal.id} is shown`), // [1]\r\n  onClose: (modal) => {\r\n    updateSelection();\r\n  }, // [2]\r\n  // openTrigger: \"data-custom-open\", // [3]\r\n  // closeTrigger: \"data-custom-close\", // [4]\r\n  openClass: \"is-open\", // [5]\r\n  disableScroll: true, // [6]\r\n  disableFocus: false, // [7]\r\n  awaitOpenAnimation: true, // [8]\r\n  awaitCloseAnimation: true, // [9]\r\n  debugMode: true, // [10]\r\n});\r\n\r\n/***************************\r\nDom references\r\n***************************/\r\n\r\n// For nav\r\nconst openMenuBtn = document.getElementById(\"burger\");\r\nconst closeMenuBtn = document.getElementById(\"closeMenu\");\r\nconst menuControls = document.getElementById(\"menuControls\");\r\nconst nav = document.getElementById(\"nav\");\r\n\r\n// For bookmark\r\nconst bookmarkBtn = document.getElementById(\"bookmarkBtn\");\r\n\r\n// For modals\r\nconst popupModal = document.querySelector(\".popup-modal\");\r\nconst modalTriggers = document.querySelectorAll(\".popup-trigger\");\r\nconst modalCloseTrigger = document.querySelector(\".popup-modal__close\");\r\nconst successModalCloseTrigger = document.querySelector(\r\n  \".success-modal__close\"\r\n);\r\nconst cardWrap = document.querySelectorAll(\".cardWrap\");\r\nconst pledgeForms = document.querySelectorAll(\".cardWrap form\");\r\nconst modalHeader = document.querySelectorAll(\".cardWrap .head\");\r\nconst radios = document.querySelectorAll(\"input[type='radio']\");\r\nconst forms = document.querySelectorAll(\".productForm form\");\r\nconst inputs = document.querySelectorAll(\r\n  \".productForm form input[type='text']\"\r\n);\r\nconst donations = document.getElementById(\"donations\");\r\nconst backers = document.getElementById(\"backers\");\r\nconst progress = document.getElementById(\"progress\");\r\n\r\n/***************************\r\nVariables\r\n***************************/\r\nlet bookmarked = false;\r\nlet donationsValue = 89914;\r\nlet backersValue = 5007;\r\n// Defining amount of products left and minimum pledges for products\r\nlet products = {\r\n  \"no-reward\": { amount: null, minPledge: 0 },\r\n  \"bamboo-stand\": { amount: 101, minPledge: 25 },\r\n  \"black-stand\": { amount: 64, minPledge: 75 },\r\n  \"mahogany-stand\": { amount: 0, minPledge: 200 },\r\n};\r\n\r\n/***************************\r\nNavbar Logic\r\n***************************/\r\nopenMenuBtn.addEventListener(\"click\", openMenu);\r\ncloseMenuBtn.addEventListener(\"click\", closeMenu);\r\n\r\nfunction openMenu() {\r\n  nav.classList.add(\"open\");\r\n  menuControls.classList.add(\"open\");\r\n}\r\nfunction closeMenu() {\r\n  nav.classList.remove(\"open\");\r\n  menuControls.classList.remove(\"open\");\r\n}\r\n\r\n/***************************\r\nBookmark Logic\r\n***************************/\r\nbookmarkBtn.addEventListener(\"click\", addBookmark);\r\n\r\nfunction addBookmark() {\r\n  if (!bookmarked) {\r\n    console.log(\"adding bookmark\");\r\n    bookmarkBtn.lastElementChild.innerText = \"Bookmarked\";\r\n    bookmarkBtn.classList.add(\"bookmarked\");\r\n    bookmarked = true;\r\n  }\r\n}\r\n\r\n/***************************\r\nModal Logic\r\n***************************/\r\n\r\n// close modals\r\n// modalCloseTrigger.addEventListener(\"click\", () => {\r\n//   MicroModal.close(\"selection-modal\");\r\n//   updateSelection();\r\n// });\r\n\r\n// Open modal when triggers are clicked\r\nmodalTriggers.forEach((trigger) => {\r\n  trigger.addEventListener(\"click\", () => {\r\n    const product = trigger.dataset.popupTrigger;\r\n    openModal(product);\r\n  });\r\n});\r\n\r\n// Selecting card with keyboard on enter\r\ncardWrap.forEach((card) => {\r\n  card.addEventListener(\"keypress\", selectCard);\r\n});\r\nfunction selectCard(e) {\r\n  let keycode = e.keyCode ? e.keyCode : e.which;\r\n  var caller = e.target || e.srcElement;\r\n  if (caller.classList.contains(\"cardWrap\") && keycode == \"13\") {\r\n    let radio = caller.querySelector(\"input[type='radio']\");\r\n    radio.checked = true;\r\n    updateSelection(radio.dataset.product);\r\n  }\r\n}\r\n\r\n// triggers click event of element on enter\r\nmodalCloseTrigger.addEventListener(\"keypress\", triggerClick);\r\nfunction triggerClick(e) {\r\n  let keycode = e.keyCode ? e.keyCode : e.which;\r\n  if (keycode == \"13\") {\r\n    var caller = e.target || e.srcElement;\r\n    caller.click();\r\n  }\r\n}\r\n\r\n// Update selected product to match selected radio button\r\nradios.forEach((radio) =>\r\n  radio.addEventListener(\"change\", () => updateSelection(radio.dataset.product))\r\n);\r\n\r\n// select product and check radio on header click\r\nmodalHeader.forEach((header) => {\r\n  header.addEventListener(\"click\", () => {\r\n    let radio = header.nextElementSibling.querySelector(\"input[type='radio']\");\r\n    radio.checked = true;\r\n    updateSelection(radio.dataset.product);\r\n  });\r\n});\r\n\r\n// Handle pledge submission, validation and updating amounts\r\nforms.forEach((form) => {\r\n  let product = form.dataset.product;\r\n  form.addEventListener(\"submit\", (e) => {\r\n    e.preventDefault();\r\n    let form = e.target;\r\n\r\n    // Validate form input\r\n    let pledge = validatePledge(form, products[`${product}`].minPledge);\r\n\r\n    if (pledge) {\r\n      // update donations\r\n      donationsValue += pledge;\r\n      backersValue += 1;\r\n      products[`${product}`].amount -= 1;\r\n\r\n      updateAmounts(product);\r\n\r\n      // Show success modal\r\n      MicroModal.close(\"selection-modal\");\r\n      MicroModal.show(\"success-modal\");\r\n    }\r\n  });\r\n\r\n  // Auto validating pledge amounts\r\n  let input = form.querySelector(\"input[type='text']\");\r\n  input.addEventListener(\"input\", () => {\r\n    validatePledge(form, products[`${product}`].minPledge);\r\n  });\r\n});\r\n\r\n// Update amounts funtion\r\nfunction updateAmounts(product) {\r\n  donations.innerText = numberWithCommas(donationsValue);\r\n  backers.innerText = numberWithCommas(backersValue);\r\n  progress.value = donationsValue;\r\n\r\n  // update amounts\r\n  let amount = document.querySelectorAll(`.amount`);\r\n  if (product) {\r\n    // Update the product amount only\r\n    amount.forEach((element) => {\r\n      if (element.dataset.product === product) {\r\n        if (products[`${product}`].amount === 0) {\r\n          document\r\n            .querySelectorAll(`.card[data-product=${product}]`)\r\n            .forEach((card) => {\r\n              card.classList.add(\"out-of-stock\");\r\n              let button = card.querySelector(\"button\");\r\n              button.disabled = true;\r\n              button.innerText = \"Out of Stock\";\r\n            });\r\n          let wrap = document.querySelector(\r\n            `.cardWrap[data-product=${product}]`\r\n          );\r\n          wrap.classList.add(\"out-of-stock\");\r\n          wrap.tabIndex = \"-1\";\r\n          wrap.querySelector(\"input[type='radio']\").tabIndex = \"-1\";\r\n        }\r\n\r\n        element.innerText = products[`${product}`].amount;\r\n      }\r\n    });\r\n  } else {\r\n    // Update all product amount\r\n    amount.forEach((element) => {\r\n      if (products[`${element.dataset.product}`].amount === 0) {\r\n        document\r\n          .querySelectorAll(`.card[data-product=${product}]`)\r\n          .forEach((card) => {\r\n            card.classList.add(\"out-of-stock\");\r\n            let button = card.querySelector(\"button\");\r\n            button.disabled = true;\r\n            button.innerText = \"Out of Stock\";\r\n          });\r\n        document\r\n          .querySelectorAll(`.cardWrap[data-product=${product}]`)\r\n          .forEach((card) => {\r\n            card.classList.add(\"out-of-stock\");\r\n            card.tabIndex = \"-1\";\r\n            card.querySelector(\"input[type='radio']\").tabIndex = \"-1\";\r\n          });\r\n      }\r\n\r\n      element.innerText = products[`${element.dataset.product}`].amount;\r\n    });\r\n  }\r\n}\r\n\r\n// Open modal function\r\nfunction openModal(product) {\r\n  MicroModal.show(\"selection-modal\");\r\n\r\n  if (product) {\r\n    updateSelection(product);\r\n    popupModal\r\n      .querySelector(`.cardWrap[data-product=${product}] input[type='text']`)\r\n      .focus();\r\n  }\r\n}\r\n\r\n// Funtion to update selected product on modal\r\nfunction updateSelection(product) {\r\n  cardWrap.forEach((card) => {\r\n    if (product && card.dataset.product == product) {\r\n      // Check card\r\n      card.classList.add(\"checked\");\r\n      card.querySelector(\"input[type='radio']\").checked = true;\r\n\r\n      // autofocus input\r\n      card.querySelector(\"input[type='text']\").focus();\r\n    } else {\r\n      // Uncheck card, clear inputs and clear errors\r\n      card.classList.remove(\"checked\");\r\n      card.querySelector(\"input[type='radio']\").checked = false;\r\n      card.querySelector(\"input[type='text']\").value = \"\";\r\n      card.querySelector(\"form\").classList.remove(\"error\");\r\n    }\r\n  });\r\n}\r\n\r\n// Function to validate pledge amount\r\nfunction validatePledge(form, min = 0) {\r\n  // Get children elements\r\n  let input = form.querySelector(\"input[type='text']\");\r\n  let err = form.querySelector(\".errorMessage\");\r\n\r\n  if (input.value === \"\") {\r\n    form.classList.add(\"error\");\r\n    err.innerText = \"enter amount\";\r\n    return;\r\n  } else if (input.value.match(/\\D/)) {\r\n    form.classList.add(\"error\");\r\n    err.innerText = \"enter numeric characters only [0-9]\";\r\n    return;\r\n  } else if (Number(input.value) < min) {\r\n    form.classList.add(\"error\");\r\n    err.innerText = `amount must be at least $${min}`;\r\n    return;\r\n  } else {\r\n    form.classList.remove(\"error\");\r\n    err.innerText = \"\";\r\n    return Number(input.value);\r\n  }\r\n}\r\n\r\n// turn numbers to comma seperated strings\r\nfunction numberWithCommas(x) {\r\n  var parts = x.toString().split(\".\");\r\n  parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  return parts.join(\".\");\r\n}\r\n\r\n// Update amounts on start\r\nupdateAmounts();\r\n\r\n// Confirm script is connected\r\nconsole.log(\"script loaded\");\r\n"]}